import { z } from 'zod';

const Roblox_Web_Responses_Thumbnails_ThumbnailResponse = z
  .object({
    targetId: z.number().int(),
    state: z.enum(['Error', 'Completed', 'InReview', 'Pending', 'Blocked', 'TemporarilyUnavailable']),
    imageUrl: z.string(),
  })
  .partial();
const Roblox_Web_WebAPI_Models_ApiArrayResponse_Roblox_Web_Responses_Thumbnails_ThumbnailResponse_ = z
  .object({
    data: z.array(Roblox_Web_Responses_Thumbnails_ThumbnailResponse),
  })
  .partial();
const Roblox_Web_WebAPI_Models_ApiErrorModel = z
  .object({
    code: z.number().int(),
    message: z.string(),
    userFacingMessage: z.string(),
    field: z.string(),
    fieldData: z.unknown(),
  })
  .partial();
const Roblox_Thumbnails_Api_Models_UniverseThumbnailsResponse = z
  .object({
    universeId: z.number().int(),
    error: Roblox_Web_WebAPI_Models_ApiErrorModel,
    thumbnails: z.array(Roblox_Web_Responses_Thumbnails_ThumbnailResponse),
  })
  .partial();
const Roblox_Web_WebAPI_Models_ApiArrayResponse_Roblox_Thumbnails_Api_Models_UniverseThumbnailsResponse_ = z
  .object({
    data: z.array(Roblox_Thumbnails_Api_Models_UniverseThumbnailsResponse),
  })
  .partial();
const Roblox_Thumbnails_Api_Models_ThumbnailMetaDataResponse = z
  .object({
    isWebappUseCacheEnabled: z.boolean(),
    webappCacheExpirationTimspan: z.string(),
  })
  .partial();
const Roblox_Thumbnails_Apis_Models_ThumbnailBatchRequest = z
  .object({
    requestId: z.string(),
    targetId: z.number().int(),
    token: z.string(),
    alias: z.string(),
    type: z.enum([
      'Avatar',
      'AvatarHeadShot',
      'GameIcon',
      'BadgeIcon',
      'GameThumbnail',
      'GamePass',
      'Asset',
      'BundleThumbnail',
      'Outfit',
      'GroupIcon',
      'DeveloperProduct',
      'AvatarBust',
      'AutoGeneratedAsset',
      'PlaceIcon',
      'AutoGeneratedGameIcon',
      'ForceAutoGeneratedGameIcon',
    ]),
    size: z.string(),
    format: z.string(),
    isCircular: z.boolean(),
  })
  .partial();
const Roblox_Web_Responses_Thumbnails_ThumbnailBatchResponse = z
  .object({
    requestId: z.string(),
    errorCode: z.number().int(),
    errorMessage: z.string(),
    targetId: z.number().int(),
    state: z.enum(['Error', 'Completed', 'InReview', 'Pending', 'Blocked', 'TemporarilyUnavailable']),
    imageUrl: z.string(),
  })
  .partial();
const Roblox_Web_WebAPI_Models_ApiArrayResponse_Roblox_Web_Responses_Thumbnails_ThumbnailBatchResponse_ = z
  .object({
    data: z.array(Roblox_Web_Responses_Thumbnails_ThumbnailBatchResponse),
  })
  .partial();

const schemas = {
  Roblox_Web_Responses_Thumbnails_ThumbnailResponse,
  Roblox_Web_WebAPI_Models_ApiArrayResponse_Roblox_Web_Responses_Thumbnails_ThumbnailResponse_,
  Roblox_Web_WebAPI_Models_ApiErrorModel,
  Roblox_Thumbnails_Api_Models_UniverseThumbnailsResponse,
  Roblox_Web_WebAPI_Models_ApiArrayResponse_Roblox_Thumbnails_Api_Models_UniverseThumbnailsResponse_,
  Roblox_Thumbnails_Api_Models_ThumbnailMetaDataResponse,
  Roblox_Thumbnails_Apis_Models_ThumbnailBatchRequest,
  Roblox_Web_Responses_Thumbnails_ThumbnailBatchResponse,
  Roblox_Web_WebAPI_Models_ApiArrayResponse_Roblox_Web_Responses_Thumbnails_ThumbnailBatchResponse_,
};

export const getV1assetThumbnailAnimated = {
  method: 'get' as const,
  path: '/v1/asset-thumbnail-animated',
  baseUrl: 'https://thumbnails.roblox.com',
  requestFormat: 'json' as const,
  parameters: {
    assetId: z.number().int(),
  },
  response: Roblox_Web_Responses_Thumbnails_ThumbnailResponse,
  errors: [
    {
      status: 400,
      description: `4: The requested Ids are invalid, of an invalid type or missing.`,
      schema: z.void(),
    },
  ],
};
export const getV1assets = {
  method: 'get' as const,
  path: '/v1/assets',
  baseUrl: 'https://thumbnails.roblox.com',
  requestFormat: 'json' as const,
  parameters: {
    assetIds: z.array(z.number()),
    returnPolicy: z.enum(['PlaceHolder', 'AutoGenerated', 'ForceAutoGenerated']).optional().default('PlaceHolder'),
    size: z
      .enum([
        '30x30',
        '42x42',
        '50x50',
        '60x62',
        '75x75',
        '110x110',
        '140x140',
        '150x150',
        '160x100',
        '160x600',
        '250x250',
        '256x144',
        '300x250',
        '304x166',
        '384x216',
        '396x216',
        '420x420',
        '480x270',
        '512x512',
        '576x324',
        '700x700',
        '728x90',
        '768x432',
        '1200x80',
      ])
      .optional()
      .default('30x30'),
    format: z.enum(['Png', 'Jpeg']).optional().default('Png'),
    isCircular: z.boolean().optional().default(false),
  },
  response: Roblox_Web_WebAPI_Models_ApiArrayResponse_Roblox_Web_Responses_Thumbnails_ThumbnailResponse_,
  errors: [
    {
      status: 400,
      description: `1: There are too many requested Ids.
2: The requested image format is invalid. Please see documentation for valid thumbnail format parameter name and values.
3: The requested size is invalid. Please see documentation for valid thumbnail size parameter name and format.
4: The requested Ids are invalid, of an invalid type or missing.
8: The requested return policy is invalid (must be PlaceHolder, AutoGenerated or ForceAutoGenerated).
10: Circular thumbnail requests are not allowed`,
      schema: z.void(),
    },
    {
      status: 403,
      description: `9: User not authorized to use AutoGenerated or ForceAutoGenerated return policies.`,
      schema: z.void(),
    },
  ],
};
export const getV1assetsThumbnail3d = {
  method: 'get' as const,
  path: '/v1/assets-thumbnail-3d',
  baseUrl: 'https://thumbnails.roblox.com',
  requestFormat: 'json' as const,
  parameters: {
    assetId: z.number().int(),
  },
  response: Roblox_Web_Responses_Thumbnails_ThumbnailResponse,
  errors: [
    {
      status: 400,
      description: `4: The requested Ids are invalid, of an invalid type or missing.`,
      schema: z.void(),
    },
  ],
};
export const getV1badgesicons = {
  method: 'get' as const,
  path: '/v1/badges/icons',
  baseUrl: 'https://thumbnails.roblox.com',
  requestFormat: 'json' as const,
  parameters: {
    badgeIds: z.array(z.number()),
    size: z.literal('150x150').optional().default('150x150'),
    format: z.literal('Png').optional().default('Png'),
    isCircular: z.boolean().optional().default(false),
  },
  response: Roblox_Web_WebAPI_Models_ApiArrayResponse_Roblox_Web_Responses_Thumbnails_ThumbnailResponse_,
  errors: [
    {
      status: 400,
      description: `1: There are too many requested Ids.
2: The requested image format is invalid. Please see documentation for valid thumbnail format parameter name and values.
3: The requested size is invalid. Please see documentation for valid thumbnail size parameter name and format.
4: The requested Ids are invalid, of an invalid type or missing.
10: Circular thumbnail requests are not allowed`,
      schema: z.void(),
    },
  ],
};
export const postV1batch = {
  method: 'post' as const,
  path: '/v1/batch',
  baseUrl: 'https://thumbnails.roblox.com',
  requestFormat: 'json' as const,
  parameters: {
    body: z.array(Roblox_Thumbnails_Apis_Models_ThumbnailBatchRequest),
  },
  response: Roblox_Web_WebAPI_Models_ApiArrayResponse_Roblox_Web_Responses_Thumbnails_ThumbnailBatchResponse_,
  errors: [
    {
      status: 400,
      description: `1: There are too many requested Ids.
2: The requested image format is invalid. Please see documentation for valid thumbnail format parameter name and values.
3: The requested size is invalid. Please see documentation for valid thumbnail size parameter name and format.
4: The requested Ids are invalid, of an invalid type or missing.
7: The specified type is not supported by the batch endpoint`,
      schema: z.void(),
    },
    {
      status: 403,
      description: `9: User not authorized to use AutoGenerated or ForceAutoGenerated return policies.`,
      schema: z.void(),
    },
  ],
};
export const getV1bundlesthumbnails = {
  method: 'get' as const,
  path: '/v1/bundles/thumbnails',
  baseUrl: 'https://thumbnails.roblox.com',
  requestFormat: 'json' as const,
  parameters: {
    bundleIds: z.array(z.number()),
    size: z.enum(['150x150', '420x420']).optional().default('150x150'),
    format: z.literal('Png').optional().default('Png'),
    isCircular: z.boolean().optional().default(false),
  },
  response: Roblox_Web_WebAPI_Models_ApiArrayResponse_Roblox_Web_Responses_Thumbnails_ThumbnailResponse_,
  errors: [
    {
      status: 400,
      description: `1: There are too many requested Ids.
2: The requested image format is invalid. Please see documentation for valid thumbnail format parameter name and values.
3: The requested size is invalid. Please see documentation for valid thumbnail size parameter name and format.
4: The requested Ids are invalid, of an invalid type or missing.
10: Circular thumbnail requests are not allowed`,
      schema: z.void(),
    },
  ],
};
export const getV1developerProductsicons = {
  method: 'get' as const,
  path: '/v1/developer-products/icons',
  baseUrl: 'https://thumbnails.roblox.com',
  requestFormat: 'json' as const,
  parameters: {
    developerProductIds: z.array(z.number()),
    size: z.enum(['150x150', '420x420']).optional().default('150x150'),
    format: z.literal('Png').optional().default('Png'),
    isCircular: z.boolean().optional().default(false),
  },
  response: Roblox_Web_WebAPI_Models_ApiArrayResponse_Roblox_Web_Responses_Thumbnails_ThumbnailResponse_,
  errors: [
    {
      status: 400,
      description: `1: There are too many requested Ids.
2: The requested image format is invalid. Please see documentation for valid thumbnail format parameter name and values.
3: The requested size is invalid. Please see documentation for valid thumbnail size parameter name and format.
4: The requested Ids are invalid, of an invalid type or missing.
10: Circular thumbnail requests are not allowed`,
      schema: z.void(),
    },
  ],
};
export const getV1gamePasses = {
  method: 'get' as const,
  path: '/v1/game-passes',
  baseUrl: 'https://thumbnails.roblox.com',
  requestFormat: 'json' as const,
  parameters: {
    gamePassIds: z.array(z.number()),
    size: z.literal('150x150').optional().default('150x150'),
    format: z.literal('Png').optional().default('Png'),
    isCircular: z.boolean().optional().default(false),
  },
  response: Roblox_Web_WebAPI_Models_ApiArrayResponse_Roblox_Web_Responses_Thumbnails_ThumbnailResponse_,
  errors: [
    {
      status: 400,
      description: `1: There are too many requested Ids.
2: The requested image format is invalid. Please see documentation for valid thumbnail format parameter name and values.
3: The requested size is invalid. Please see documentation for valid thumbnail size parameter name and format.
4: The requested Ids are invalid, of an invalid type or missing.
10: Circular thumbnail requests are not allowed`,
      schema: z.void(),
    },
  ],
};
export const getV1gamesUniverseIdthumbnails = {
  method: 'get' as const,
  path: '/v1/games/:universeId/thumbnails',
  baseUrl: 'https://thumbnails.roblox.com',
  requestFormat: 'json' as const,
  parameters: {
    universeId: z.number().int(),
    thumbnailIds: z.array(z.number()),
    size: z.enum(['768x432', '576x324', '480x270', '384x216', '256x144']).optional().default('768x432'),
    format: z.enum(['Png', 'Jpeg']).optional().default('Png'),
    isCircular: z.boolean().optional().default(false),
  },
  response: Roblox_Web_WebAPI_Models_ApiArrayResponse_Roblox_Web_Responses_Thumbnails_ThumbnailResponse_,
  errors: [
    {
      status: 400,
      description: `1: There are too many requested Ids.
2: The requested image format is invalid. Please see documentation for valid thumbnail format parameter name and values.
3: The requested size is invalid. Please see documentation for valid thumbnail size parameter name and format.
4: The requested Ids are invalid, of an invalid type or missing.
10: Circular thumbnail requests are not allowed`,
      schema: z.void(),
    },
    {
      status: 404,
      description: `5: The requested universe does not exist.`,
      schema: z.void(),
    },
  ],
};
export const getV1gamesicons = {
  method: 'get' as const,
  path: '/v1/games/icons',
  baseUrl: 'https://thumbnails.roblox.com',
  requestFormat: 'json' as const,
  parameters: {
    universeIds: z.array(z.number()),
    returnPolicy: z.enum(['PlaceHolder', 'AutoGenerated', 'ForceAutoGenerated']).optional().default('PlaceHolder'),
    size: z.enum(['50x50', '128x128', '150x150', '256x256', '512x512']).optional().default('50x50'),
    format: z.enum(['Png', 'Jpeg']).optional().default('Png'),
    isCircular: z.boolean().optional().default(false),
  },
  response: Roblox_Web_WebAPI_Models_ApiArrayResponse_Roblox_Web_Responses_Thumbnails_ThumbnailResponse_,
  errors: [
    {
      status: 400,
      description: `1: There are too many requested Ids.
2: The requested image format is invalid. Please see documentation for valid thumbnail format parameter name and values.
3: The requested size is invalid. Please see documentation for valid thumbnail size parameter name and format.
4: The requested Ids are invalid, of an invalid type or missing.
8: The requested return policy is invalid (must be PlaceHolder, AutoGenerated or ForceAutoGenerated).
10: Circular thumbnail requests are not allowed`,
      schema: z.void(),
    },
    {
      status: 403,
      description: `9: User not authorized to use AutoGenerated or ForceAutoGenerated return policies.`,
      schema: z.void(),
    },
  ],
};
export const getV1gamesmultigetthumbnails = {
  method: 'get' as const,
  path: '/v1/games/multiget/thumbnails',
  baseUrl: 'https://thumbnails.roblox.com',
  requestFormat: 'json' as const,
  parameters: {
    universeIds: z.array(z.number()),
    countPerUniverse: z.number().int().optional().default(1),
    defaults: z.boolean().optional().default(true),
    size: z.enum(['768x432', '576x324', '480x270', '384x216', '256x144']).optional().default('768x432'),
    format: z.enum(['Png', 'Jpeg']).optional().default('Png'),
    isCircular: z.boolean().optional().default(false),
  },
  response: Roblox_Web_WebAPI_Models_ApiArrayResponse_Roblox_Thumbnails_Api_Models_UniverseThumbnailsResponse_,
  errors: [
    {
      status: 400,
      description: `0: Unknown error
1: There are too many requested Ids.
4: The requested Ids are invalid, of an invalid type or missing.
5: The requested universe does not exist.
10: Circular thumbnail requests are not allowed`,
      schema: z.void(),
    },
  ],
};
export const getV1groupsicons = {
  method: 'get' as const,
  path: '/v1/groups/icons',
  baseUrl: 'https://thumbnails.roblox.com',
  requestFormat: 'json' as const,
  parameters: {
    groupIds: z.array(z.number()),
    size: z.enum(['150x150', '420x420']).optional().default('150x150'),
    format: z.literal('Png').optional().default('Png'),
    isCircular: z.boolean().optional().default(false),
  },
  response: Roblox_Web_WebAPI_Models_ApiArrayResponse_Roblox_Web_Responses_Thumbnails_ThumbnailResponse_,
  errors: [
    {
      status: 400,
      description: `1: There are too many requested Ids.
2: The requested image format is invalid. Please see documentation for valid thumbnail format parameter name and values.
3: The requested size is invalid. Please see documentation for valid thumbnail size parameter name and format.
4: The requested Ids are invalid, of an invalid type or missing.
10: Circular thumbnail requests are not allowed`,
      schema: z.void(),
    },
  ],
};
export const getV1metadata = {
  method: 'get' as const,
  path: '/v1/metadata',
  baseUrl: 'https://thumbnails.roblox.com',
  requestFormat: 'json' as const,
  response: Roblox_Thumbnails_Api_Models_ThumbnailMetaDataResponse,
  errors: [],
};
export const getV1placesgameicons = {
  method: 'get' as const,
  path: '/v1/places/gameicons',
  baseUrl: 'https://thumbnails.roblox.com',
  requestFormat: 'json' as const,
  parameters: {
    placeIds: z.array(z.number()),
    returnPolicy: z.enum(['PlaceHolder', 'AutoGenerated', 'ForceAutoGenerated']).optional().default('PlaceHolder'),
    size: z.enum(['50x50', '128x128', '150x150', '256x256', '512x512']).optional().default('50x50'),
    format: z.enum(['Png', 'Jpeg']).optional().default('Png'),
    isCircular: z.boolean().optional().default(false),
  },
  response: Roblox_Web_WebAPI_Models_ApiArrayResponse_Roblox_Web_Responses_Thumbnails_ThumbnailResponse_,
  errors: [
    {
      status: 400,
      description: `1: There are too many requested Ids.
2: The requested image format is invalid. Please see documentation for valid thumbnail format parameter name and values.
3: The requested size is invalid. Please see documentation for valid thumbnail size parameter name and format.
4: The requested Ids are invalid, of an invalid type or missing.
8: The requested return policy is invalid (must be PlaceHolder, AutoGenerated or ForceAutoGenerated).
10: Circular thumbnail requests are not allowed`,
      schema: z.void(),
    },
    {
      status: 403,
      description: `9: User not authorized to use AutoGenerated or ForceAutoGenerated return policies.`,
      schema: z.void(),
    },
  ],
};
export const getV1usersavatar = {
  method: 'get' as const,
  path: '/v1/users/avatar',
  baseUrl: 'https://thumbnails.roblox.com',
  requestFormat: 'json' as const,
  parameters: {
    userIds: z.array(z.number()),
    size: z
      .enum([
        '30x30',
        '48x48',
        '60x60',
        '75x75',
        '100x100',
        '110x110',
        '140x140',
        '150x150',
        '150x200',
        '180x180',
        '250x250',
        '352x352',
        '420x420',
        '720x720',
      ])
      .optional()
      .default('30x30'),
    format: z.enum(['Png', 'Jpeg']).optional().default('Png'),
    isCircular: z.boolean().optional().default(false),
  },
  response: Roblox_Web_WebAPI_Models_ApiArrayResponse_Roblox_Web_Responses_Thumbnails_ThumbnailResponse_,
  errors: [
    {
      status: 400,
      description: `1: There are too many requested Ids.
2: The requested image format is invalid. Please see documentation for valid thumbnail format parameter name and values.
3: The requested size is invalid. Please see documentation for valid thumbnail size parameter name and format.
4: The requested Ids are invalid, of an invalid type or missing.
10: Circular thumbnail requests are not allowed`,
      schema: z.void(),
    },
  ],
};
export const getV1usersavatar3d = {
  method: 'get' as const,
  path: '/v1/users/avatar-3d',
  baseUrl: 'https://thumbnails.roblox.com',
  requestFormat: 'json' as const,
  parameters: {
    userId: z.number().int(),
  },
  response: Roblox_Web_Responses_Thumbnails_ThumbnailResponse,
  errors: [
    {
      status: 400,
      description: `4: The requested Ids are invalid, of an invalid type or missing.`,
      schema: z.void(),
    },
  ],
};
export const getV1usersavatarBust = {
  method: 'get' as const,
  path: '/v1/users/avatar-bust',
  baseUrl: 'https://thumbnails.roblox.com',
  requestFormat: 'json' as const,
  parameters: {
    userIds: z.array(z.number()),
    size: z
      .enum(['48x48', '50x50', '60x60', '75x75', '100x100', '150x150', '180x180', '352x352', '420x420'])
      .optional()
      .default('48x48'),
    format: z.literal('Png').optional().default('Png'),
    isCircular: z.boolean().optional().default(false),
  },
  response: Roblox_Web_WebAPI_Models_ApiArrayResponse_Roblox_Web_Responses_Thumbnails_ThumbnailResponse_,
  errors: [
    {
      status: 400,
      description: `1: There are too many requested Ids.
2: The requested image format is invalid. Please see documentation for valid thumbnail format parameter name and values.
3: The requested size is invalid. Please see documentation for valid thumbnail size parameter name and format.
4: The requested Ids are invalid, of an invalid type or missing.
10: Circular thumbnail requests are not allowed`,
      schema: z.void(),
    },
  ],
};
export const getV1usersavatarHeadshot = {
  method: 'get' as const,
  path: '/v1/users/avatar-headshot',
  baseUrl: 'https://thumbnails.roblox.com',
  requestFormat: 'json' as const,
  parameters: {
    userIds: z.array(z.number()),
    size: z
      .enum([
        '48x48',
        '50x50',
        '60x60',
        '75x75',
        '100x100',
        '110x110',
        '150x150',
        '180x180',
        '352x352',
        '420x420',
        '720x720',
      ])
      .optional()
      .default('48x48'),
    format: z.enum(['Png', 'Jpeg']).optional().default('Png'),
    isCircular: z.boolean().optional().default(false),
  },
  response: Roblox_Web_WebAPI_Models_ApiArrayResponse_Roblox_Web_Responses_Thumbnails_ThumbnailResponse_,
  errors: [
    {
      status: 400,
      description: `1: There are too many requested Ids.
2: The requested image format is invalid. Please see documentation for valid thumbnail format parameter name and values.
3: The requested size is invalid. Please see documentation for valid thumbnail size parameter name and format.
4: The requested Ids are invalid, of an invalid type or missing.
10: Circular thumbnail requests are not allowed`,
      schema: z.void(),
    },
  ],
};
export const getV1usersoutfit3d = {
  method: 'get' as const,
  path: '/v1/users/outfit-3d',
  baseUrl: 'https://thumbnails.roblox.com',
  requestFormat: 'json' as const,
  parameters: {
    outfitId: z.number().int(),
  },
  response: Roblox_Web_Responses_Thumbnails_ThumbnailResponse,
  errors: [],
};
export const getV1usersoutfits = {
  method: 'get' as const,
  path: '/v1/users/outfits',
  baseUrl: 'https://thumbnails.roblox.com',
  requestFormat: 'json' as const,
  parameters: {
    userOutfitIds: z.array(z.number()),
    size: z.enum(['150x150', '420x420']).optional().default('150x150'),
    format: z.literal('Png').optional().default('Png'),
    isCircular: z.boolean().optional().default(false),
  },
  response: Roblox_Web_WebAPI_Models_ApiArrayResponse_Roblox_Web_Responses_Thumbnails_ThumbnailResponse_,
  errors: [
    {
      status: 400,
      description: `1: There are too many requested Ids.
2: The requested image format is invalid. Please see documentation for valid thumbnail format parameter name and values.
3: The requested size is invalid. Please see documentation for valid thumbnail size parameter name and format.
4: The requested Ids are invalid, of an invalid type or missing.
10: Circular thumbnail requests are not allowed`,
      schema: z.void(),
    },
  ],
};
