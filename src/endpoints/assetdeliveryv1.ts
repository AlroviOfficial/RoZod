import { z } from 'zod';

const Roblox_Web_Assets_IAssetItemError = z
  .object({
    Code: z.number().int(),
    Message: z.string(),
    CustomErrorCode: z.union([z.literal(0), z.literal(1), z.literal(2)]),
  })
  .partial();
const Roblox_Web_Assets_IAssetResponseItem = z
  .object({
    Location: z.string(),
    Errors: z.array(Roblox_Web_Assets_IAssetItemError),
    RequestId: z.string(),
    IsHashDynamic: z.boolean(),
    IsCopyrightProtected: z.boolean(),
    IsArchived: z.boolean(),
  })
  .partial();
const Roblox_Web_Assets_BatchAssetRequestItem = z
  .object({
    assetName: z.string(),
    assetType: z.string(),
    clientInsert: z.boolean(),
    placeId: z.number().int(),
    requestId: z.string(),
    scriptInsert: z.boolean(),
    serverPlaceId: z.number().int(),
    universeId: z.number().int(),
    accept: z.string(),
    encoding: z.string(),
    hash: z.string(),
    userAssetId: z.number().int(),
    assetId: z.number().int(),
    version: z.number().int(),
    assetVersionId: z.number().int(),
    modulePlaceId: z.number().int(),
    assetFormat: z.string(),
    'roblox-assetFormat': z.string(),
  })
  .partial();

const schemas = {
  Roblox_Web_Assets_IAssetItemError,
  Roblox_Web_Assets_IAssetResponseItem,
  Roblox_Web_Assets_BatchAssetRequestItem,
};

export const getV1aliasAlias = {
  method: 'get' as const,
  path: '/v1/alias/:alias',
  baseUrl: 'https://assetdelivery.roblox.com',
  requestFormat: 'json' as const,
  parameters: {
    alias: z.string().regex(/^[0-9]+\\/),
    'Accept-Encoding': z.string(),
    'Roblox-Place-Id': z.number().int(),
    AssetType: z.string(),
    Accept: z.string(),
    AssetFormat: z.string(),
    'Roblox-AssetFormat': z.string(),
    skipSigningScripts: z.boolean().optional(),
    clientInsert: z.number().int().optional(),
    scriptinsert: z.number().int().optional(),
    modulePlaceId: z.number().int().optional(),
    serverplaceid: z.number().int().optional(),
    expectedAssetType: z.string().optional(),
  },
  response: Roblox_Web_Assets_IAssetResponseItem,
  errors: [],
};
export const getV1asset = {
  method: 'get' as const,
  path: '/v1/asset',
  baseUrl: 'https://assetdelivery.roblox.com',
  requestFormat: 'json' as const,
  parameters: {
    'Accept-Encoding': z.string(),
    'Roblox-Place-Id': z.number().int(),
    AssetType: z.string(),
    Accept: z.string(),
    AssetFormat: z.string(),
    'Roblox-AssetFormat': z.string(),
    id: z.number().int().optional(),
    userAssetId: z.number().int().optional(),
    assetVersionId: z.number().int().optional(),
    version: z.number().int().optional(),
    universeId: z.number().int().optional(),
    clientInsert: z.number().int().optional(),
    scriptinsert: z.number().int().optional(),
    modulePlaceId: z.number().int().optional(),
    serverplaceid: z.string().optional(),
    assetName: z.string().optional(),
    hash: z.string().optional(),
    marAssetHash: z.string().optional(),
    marCheckSum: z.string().optional(),
    expectedAssetType: z.string().optional(),
    skipSigningScripts: z.boolean().optional(),
    permissionContext: z.string().optional(),
  },
  response: z.void(),
  errors: [],
};
export const getV1assetHashHash = {
  method: 'get' as const,
  path: '/v1/assetHash/:hash',
  baseUrl: 'https://assetdelivery.roblox.com',
  requestFormat: 'json' as const,
  parameters: {
    hash: z.string(),
    'Accept-Encoding': z.string(),
    'Roblox-Place-Id': z.number().int(),
    AssetType: z.string(),
    Accept: z.string(),
    AssetFormat: z.string(),
    'Roblox-AssetFormat': z.string(),
    skipSigningScripts: z.boolean().optional(),
    clientInsert: z.number().int().optional(),
    scriptinsert: z.number().int().optional(),
    modulePlaceId: z.number().int().optional(),
    serverplaceid: z.number().int().optional(),
    expectedAssetType: z.string().optional(),
  },
  response: Roblox_Web_Assets_IAssetResponseItem,
  errors: [],
};
export const getV1assetIdAssetId = {
  method: 'get' as const,
  path: '/v1/assetId/:assetId',
  baseUrl: 'https://assetdelivery.roblox.com',
  requestFormat: 'json' as const,
  parameters: {
    assetId: z.number().int(),
    'Accept-Encoding': z.string(),
    'Roblox-Place-Id': z.number().int(),
    AssetType: z.string(),
    Accept: z.string(),
    AssetFormat: z.string(),
    'Roblox-AssetFormat': z.string(),
    skipSigningScripts: z.boolean().optional(),
    clientInsert: z.number().int().optional(),
    scriptinsert: z.number().int().optional(),
    modulePlaceId: z.number().int().optional(),
    serverplaceid: z.number().int().optional(),
    expectedAssetType: z.string().optional(),
  },
  response: Roblox_Web_Assets_IAssetResponseItem,
  errors: [],
};
export const getV1assetIdAssetIdversionVersion = {
  method: 'get' as const,
  path: '/v1/assetId/:assetId/version/:version',
  baseUrl: 'https://assetdelivery.roblox.com',
  requestFormat: 'json' as const,
  parameters: {
    assetId: z.number().int(),
    version: z.number().int(),
    'Accept-Encoding': z.string(),
    'Roblox-Place-Id': z.number().int(),
    AssetType: z.string(),
    Accept: z.string(),
    AssetFormat: z.string(),
    'Roblox-AssetFormat': z.string(),
    skipSigningScripts: z.boolean().optional(),
    clientInsert: z.number().int().optional(),
    scriptinsert: z.number().int().optional(),
    modulePlaceId: z.number().int().optional(),
    serverplaceid: z.number().int().optional(),
    expectedAssetType: z.string().optional(),
  },
  response: Roblox_Web_Assets_IAssetResponseItem,
  errors: [],
};
export const postV1assetsbatch = {
  method: 'post' as const,
  path: '/v1/assets/batch',
  baseUrl: 'https://assetdelivery.roblox.com',
  requestFormat: 'json' as const,
  parameters: {
    body: z.array(Roblox_Web_Assets_BatchAssetRequestItem),
    'Roblox-Place-Id': z.number().int(),
    Accept: z.string(),
    'Roblox-Browser-Asset-Request': z.string(),
  },
  response: z.array(Roblox_Web_Assets_IAssetResponseItem),
  errors: [],
};
export const getV1assetVersionIdAssetVersionId = {
  method: 'get' as const,
  path: '/v1/assetVersionId/:assetVersionId',
  baseUrl: 'https://assetdelivery.roblox.com',
  requestFormat: 'json' as const,
  parameters: {
    assetVersionId: z.number().int(),
    'Accept-Encoding': z.string(),
    'Roblox-Place-Id': z.number().int(),
    AssetType: z.string(),
    Accept: z.string(),
    AssetFormat: z.string(),
    'Roblox-AssetFormat': z.string(),
    skipSigningScripts: z.boolean().optional(),
    clientInsert: z.number().int().optional(),
    scriptinsert: z.number().int().optional(),
    modulePlaceId: z.number().int().optional(),
    serverplaceid: z.number().int().optional(),
    expectedAssetType: z.string().optional(),
  },
  response: Roblox_Web_Assets_IAssetResponseItem,
  errors: [],
};
export const getV1marAssetHashMarAssetHashmarCheckSumMarCheckSum = {
  method: 'get' as const,
  path: '/v1/marAssetHash/:marAssetHash/marCheckSum/:marCheckSum',
  baseUrl: 'https://assetdelivery.roblox.com',
  requestFormat: 'json' as const,
  parameters: {
    marAssetHash: z.string(),
    marCheckSum: z.string(),
    'Accept-Encoding': z.string(),
    'Roblox-Place-Id': z.number().int(),
    AssetType: z.string(),
    Accept: z.string(),
    AssetFormat: z.string(),
    'Roblox-AssetFormat': z.string(),
    skipSigningScripts: z.boolean().optional(),
    clientInsert: z.number().int().optional(),
    scriptinsert: z.number().int().optional(),
    modulePlaceId: z.number().int().optional(),
    serverplaceid: z.number().int().optional(),
    expectedAssetType: z.string().optional(),
  },
  response: Roblox_Web_Assets_IAssetResponseItem,
  errors: [
    {
      status: 400,
      description: `2: invalid server request
3: Encoding cannot be empty`,
      schema: z.void(),
    },
    {
      status: 404,
      description: `5: Asset hash cannot be empty`,
      schema: z.void(),
    },
  ],
};
export const getV1userAssetIdUserAssetId = {
  method: 'get' as const,
  path: '/v1/userAssetId/:userAssetId',
  baseUrl: 'https://assetdelivery.roblox.com',
  requestFormat: 'json' as const,
  parameters: {
    userAssetId: z.number().int(),
    'Accept-Encoding': z.string(),
    'Roblox-Place-Id': z.number().int(),
    AssetType: z.string(),
    Accept: z.string(),
    AssetFormat: z.string(),
    'Roblox-AssetFormat': z.string(),
    skipSigningScripts: z.boolean().optional(),
    clientInsert: z.number().int().optional(),
    scriptinsert: z.number().int().optional(),
    modulePlaceId: z.number().int().optional(),
    serverplaceid: z.number().int().optional(),
    expectedAssetType: z.string().optional(),
  },
  response: Roblox_Web_Assets_IAssetResponseItem,
  errors: [],
};
